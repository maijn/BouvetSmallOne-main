{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { ClassRegistry } from './class-registry';\nimport { SymbolRegistry } from './symbol-registry';\nimport { CustomTransformerRegistry } from './custom-transformer-registry';\nimport { allowErrorProps } from './error-props';\nimport { walker, applyReferentialEqualityAnnotations, applyValueAnnotations, generateReferentialEqualityAnnotations } from './plainer';\nimport { copy } from 'copy-anything';\nexport var serialize = function (object) {\n  var identities = new Map();\n  var output = walker(object, identities);\n  var res = {\n    json: output.transformedValue\n  };\n  if (output.annotations) {\n    res.meta = __assign(__assign({}, res.meta), {\n      values: output.annotations\n    });\n  }\n  var equalityAnnotations = generateReferentialEqualityAnnotations(identities);\n  if (equalityAnnotations) {\n    res.meta = __assign(__assign({}, res.meta), {\n      referentialEqualities: equalityAnnotations\n    });\n  }\n  return res;\n};\nexport var deserialize = function (payload) {\n  var json = payload.json,\n    meta = payload.meta;\n  var result = copy(json);\n  if (meta === null || meta === void 0 ? void 0 : meta.values) {\n    result = applyValueAnnotations(result, meta.values);\n  }\n  if (meta === null || meta === void 0 ? void 0 : meta.referentialEqualities) {\n    result = applyReferentialEqualityAnnotations(result, meta.referentialEqualities);\n  }\n  return result;\n};\nexport var stringify = function (object) {\n  return JSON.stringify(serialize(object));\n};\nexport var parse = function (string) {\n  return deserialize(JSON.parse(string));\n};\nexport var registerClass = function (v, options) {\n  return ClassRegistry.register(v, options);\n};\nexport var registerSymbol = function (v, identifier) {\n  return SymbolRegistry.register(v, identifier);\n};\nexport var registerCustom = function (transformer, name) {\n  return CustomTransformerRegistry.register(__assign({\n    name: name\n  }, transformer));\n};\nexport default {\n  stringify: stringify,\n  parse: parse,\n  serialize: serialize,\n  deserialize: deserialize,\n  registerClass: registerClass,\n  registerSymbol: registerSymbol,\n  registerCustom: registerCustom,\n  allowErrorProps: allowErrorProps\n};","map":{"version":3,"mappings":";;;;;;;;;;AACA,SAASA,aAAa,QAAyB,kBAAkB;AACjE,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAEEC,yBAAyB,QACpB,+BAA+B;AACtC,SAASC,eAAe,QAAQ,eAAe;AAC/C,SACEC,MAAM,EACNC,mCAAmC,EACnCC,qBAAqB,EACrBC,sCAAsC,QACjC,WAAW;AAClB,SAASC,IAAI,QAAQ,eAAe;AAEpC,OAAO,IAAMC,SAAS,GAAG,UAACC,MAAsB;EAC9C,IAAMC,UAAU,GAAG,IAAIC,GAAG,EAAgB;EAC1C,IAAMC,MAAM,GAAGT,MAAM,CAACM,MAAM,EAAEC,UAAU,CAAC;EACzC,IAAMG,GAAG,GAAoB;IAC3BC,IAAI,EAAEF,MAAM,CAACG;GACd;EAED,IAAIH,MAAM,CAACI,WAAW,EAAE;IACtBH,GAAG,CAACI,IAAI,yBACHJ,GAAG,CAACI,IAAI;MACXC,MAAM,EAAEN,MAAM,CAACI;IAAW,EAC3B;;EAGH,IAAMG,mBAAmB,GAAGb,sCAAsC,CAChEI,UAAU,CACX;EACD,IAAIS,mBAAmB,EAAE;IACvBN,GAAG,CAACI,IAAI,yBACHJ,GAAG,CAACI,IAAI;MACXG,qBAAqB,EAAED;IAAmB,EAC3C;;EAGH,OAAON,GAAG;AACZ,CAAC;AAED,OAAO,IAAMQ,WAAW,GAAG,UAAcC,OAAwB;EACvD,QAAI,GAAWA,OAAO,KAAlB;IAAEL,IAAI,GAAKK,OAAO,KAAZ;EAElB,IAAIC,MAAM,GAAMhB,IAAI,CAACO,IAAI,CAAQ;EAEjC,IAAIG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,MAAM,EAAE;IAChBK,MAAM,GAAGlB,qBAAqB,CAACkB,MAAM,EAAEN,IAAI,CAACC,MAAM,CAAC;;EAGrD,IAAID,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,qBAAqB,EAAE;IAC/BG,MAAM,GAAGnB,mCAAmC,CAC1CmB,MAAM,EACNN,IAAI,CAACG,qBAAqB,CAC3B;;EAGH,OAAOG,MAAM;AACf,CAAC;AAED,OAAO,IAAMC,SAAS,GAAG,UAACf,MAAsB;EAC9C,WAAI,CAACe,SAAS,CAAChB,SAAS,CAACC,MAAM,CAAC,CAAC;AAAjC,CAAiC;AAEnC,OAAO,IAAMgB,KAAK,GAAG,UAAcC,MAAc;EAC/C,kBAAW,CAACC,IAAI,CAACF,KAAK,CAACC,MAAM,CAAC,CAAC;AAA/B,CAA+B;AAEjC,OAAO,IAAME,aAAa,GAAG,UAACC,CAAQ,EAAEC,OAAkC;EACxE,oBAAa,CAACC,QAAQ,CAACF,CAAC,EAAEC,OAAO,CAAC;AAAlC,CAAkC;AAEpC,OAAO,IAAME,cAAc,GAAG,UAACH,CAAS,EAAEI,UAAmB;EAC3D,qBAAc,CAACF,QAAQ,CAACF,CAAC,EAAEI,UAAU,CAAC;AAAtC,CAAsC;AAExC,OAAO,IAAMC,cAAc,GAAG,UAC5BC,WAAiD,EACjDC,IAAY;EAEZ,gCAAyB,CAACL,QAAQ;IAChCK,IAAI;EAAA,GACDD,WAAW,EACd;AAHF,CAGE;AAEJ,eAAe;EACbX,SAAS;EACTC,KAAK;EACLjB,SAAS;EACTa,WAAW;EACXO,aAAa;EACbI,cAAc;EACdE,cAAc;EACdhC,eAAe;CAChB","names":["ClassRegistry","SymbolRegistry","CustomTransformerRegistry","allowErrorProps","walker","applyReferentialEqualityAnnotations","applyValueAnnotations","generateReferentialEqualityAnnotations","copy","serialize","object","identities","Map","output","res","json","transformedValue","annotations","meta","values","equalityAnnotations","referentialEqualities","deserialize","payload","result","stringify","parse","string","JSON","registerClass","v","options","register","registerSymbol","identifier","registerCustom","transformer","name"],"sources":["/Users/mai.nguyen/Desktop/Bouvet/FOREDRAG/BouvetSmallOne-main/node_modules/superjson/src/index.ts"],"sourcesContent":["import { SuperJSONResult, SuperJSONValue, Class, JSONValue } from './types';\nimport { ClassRegistry, RegisterOptions } from './class-registry';\nimport { SymbolRegistry } from './symbol-registry';\nimport {\n  CustomTransfomer,\n  CustomTransformerRegistry,\n} from './custom-transformer-registry';\nimport { allowErrorProps } from './error-props';\nimport {\n  walker,\n  applyReferentialEqualityAnnotations,\n  applyValueAnnotations,\n  generateReferentialEqualityAnnotations,\n} from './plainer';\nimport { copy } from 'copy-anything';\n\nexport const serialize = (object: SuperJSONValue): SuperJSONResult => {\n  const identities = new Map<any, any[][]>();\n  const output = walker(object, identities);\n  const res: SuperJSONResult = {\n    json: output.transformedValue,\n  };\n\n  if (output.annotations) {\n    res.meta = {\n      ...res.meta,\n      values: output.annotations,\n    };\n  }\n\n  const equalityAnnotations = generateReferentialEqualityAnnotations(\n    identities\n  );\n  if (equalityAnnotations) {\n    res.meta = {\n      ...res.meta,\n      referentialEqualities: equalityAnnotations,\n    };\n  }\n\n  return res;\n};\n\nexport const deserialize = <T = unknown>(payload: SuperJSONResult): T => {\n  const { json, meta } = payload;\n\n  let result: T = copy(json) as any;\n\n  if (meta?.values) {\n    result = applyValueAnnotations(result, meta.values);\n  }\n\n  if (meta?.referentialEqualities) {\n    result = applyReferentialEqualityAnnotations(\n      result,\n      meta.referentialEqualities\n    );\n  }\n\n  return result;\n};\n\nexport const stringify = (object: SuperJSONValue): string =>\n  JSON.stringify(serialize(object));\n\nexport const parse = <T = unknown>(string: string): T =>\n  deserialize(JSON.parse(string));\n\nexport const registerClass = (v: Class, options?: RegisterOptions | string) =>\n  ClassRegistry.register(v, options);\n\nexport const registerSymbol = (v: Symbol, identifier?: string) =>\n  SymbolRegistry.register(v, identifier);\n\nexport const registerCustom = <I, O extends JSONValue>(\n  transformer: Omit<CustomTransfomer<I, O>, 'name'>,\n  name: string\n) =>\n  CustomTransformerRegistry.register({\n    name,\n    ...transformer,\n  });\n\nexport default {\n  stringify,\n  parse,\n  serialize,\n  deserialize,\n  registerClass,\n  registerSymbol,\n  registerCustom,\n  allowErrorProps,\n};\n"]},"metadata":{},"sourceType":"module"}