{"ast":null,"code":"import { useContext } from \"react\";\n\n/**\r\n * Create a `useContext` function that throws if the context has not been provided yet.\r\n * @param context\r\n * @returns\r\n */\nexport const createContextUser = context => {\n  var _s = $RefreshSig$();\n  return _s(() => {\n    _s();\n    const ctx = useContext(context);\n    if (!ctx) throw new Error(`${context.displayName} must be provided before use`);\n    return ctx; // The \"if\" above actually makes this type implicit, but it does not work across lib/app boundaries so I've set an explicit type here to force it.\n  }, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n};","map":{"version":3,"names":["useContext","createContextUser","context","ctx","Error","displayName"],"sources":["/Users/mai.nguyen/Desktop/Bouvet/FOREDRAG/BouvetSmallOne-main/src/utils/createContextUser.ts"],"sourcesContent":["import { Context, useContext } from \"react\"\r\n\r\n/**\r\n * Create a `useContext` function that throws if the context has not been provided yet.\r\n * @param context\r\n * @returns\r\n */\r\nexport const createContextUser =\r\n\t<TValue>(context: Context<TValue>) =>\r\n\t() => {\r\n\t\tconst ctx = useContext(context)\r\n\t\tif (!ctx) throw new Error(`${context.displayName} must be provided before use`)\r\n\t\treturn ctx as NonNullable<TValue> // The \"if\" above actually makes this type implicit, but it does not work across lib/app boundaries so I've set an explicit type here to force it.\r\n\t}\r\n"],"mappings":"AAAA,SAAkBA,UAAU,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GACpBC,OAAwB;EAAA;EAAA,UACjC,MAAM;IAAA;IACL,MAAMC,GAAG,GAAGH,UAAU,CAACE,OAAO,CAAC;IAC/B,IAAI,CAACC,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAE,GAAEF,OAAO,CAACG,WAAY,8BAA6B,CAAC;IAC/E,OAAOF,GAAG,CAAuB,CAAC;EACnC,CAAC;AAAA"},"metadata":{},"sourceType":"module"}