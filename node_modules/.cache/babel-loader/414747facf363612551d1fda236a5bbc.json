{"ast":null,"code":"import { isMap, isArray, isPlainObject, isSet } from './is';\nimport { includes } from './util';\nvar getNthKey = function (value, n) {\n  var keys = value.keys();\n  while (n > 0) {\n    keys.next();\n    n--;\n  }\n  return keys.next().value;\n};\nfunction validatePath(path) {\n  if (includes(path, '__proto__')) {\n    throw new Error('__proto__ is not allowed as a property');\n  }\n  if (includes(path, 'prototype')) {\n    throw new Error('prototype is not allowed as a property');\n  }\n  if (includes(path, 'constructor')) {\n    throw new Error('constructor is not allowed as a property');\n  }\n}\nexport var getDeep = function (object, path) {\n  validatePath(path);\n  path.forEach(function (key) {\n    object = object[key];\n  });\n  return object;\n};\nexport var setDeep = function (object, path, mapper) {\n  validatePath(path);\n  if (path.length === 0) {\n    return mapper(object);\n  }\n  var parent = object;\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n    if (isArray(parent)) {\n      var index = +key;\n      parent = parent[index];\n    } else if (isPlainObject(parent)) {\n      parent = parent[key];\n    } else if (isSet(parent)) {\n      var row = +key;\n      parent = getNthKey(parent, row);\n    } else if (isMap(parent)) {\n      var isEnd = i === path.length - 2;\n      if (isEnd) {\n        break;\n      }\n      var row = +key;\n      var type = +path[++i] === 0 ? 'key' : 'value';\n      var keyOfRow = getNthKey(parent, row);\n      switch (type) {\n        case 'key':\n          parent = keyOfRow;\n          break;\n        case 'value':\n          parent = parent.get(keyOfRow);\n          break;\n      }\n    }\n  }\n  var lastKey = path[path.length - 1];\n  if (isArray(parent) || isPlainObject(parent)) {\n    parent[lastKey] = mapper(parent[lastKey]);\n  }\n  if (isSet(parent)) {\n    var oldValue = getNthKey(parent, +lastKey);\n    var newValue = mapper(oldValue);\n    if (oldValue !== newValue) {\n      parent[\"delete\"](oldValue);\n      parent.add(newValue);\n    }\n  }\n  if (isMap(parent)) {\n    var row = +path[path.length - 2];\n    var keyToRow = getNthKey(parent, row);\n    var type = +lastKey === 0 ? 'key' : 'value';\n    switch (type) {\n      case 'key':\n        {\n          var newKey = mapper(keyToRow);\n          parent.set(newKey, parent.get(keyToRow));\n          if (newKey !== keyToRow) {\n            parent[\"delete\"](keyToRow);\n          }\n          break;\n        }\n      case 'value':\n        {\n          parent.set(keyToRow, mapper(parent.get(keyToRow)));\n          break;\n        }\n    }\n  }\n  return object;\n};","map":{"version":3,"mappings":"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","names":["isMap","isArray","isPlainObject","isSet","includes","getNthKey","value","n","keys","next","validatePath","path","Error","getDeep","object","forEach","key","setDeep","mapper","length","parent","i","index","row","isEnd","type","keyOfRow","get","lastKey","oldValue","newValue","add","keyToRow","newKey","set"],"sources":["/Users/mai.nguyen/Desktop/Bouvet/FOREDRAG/BouvetSmallOne-main/node_modules/superjson/src/accessDeep.ts"],"sourcesContent":["import { isMap, isArray, isPlainObject, isSet } from './is';\nimport { includes } from './util';\n\nconst getNthKey = (value: Map<any, any> | Set<any>, n: number): any => {\n  const keys = value.keys();\n  while (n > 0) {\n    keys.next();\n    n--;\n  }\n\n  return keys.next().value;\n};\n\nfunction validatePath(path: (string | number)[]) {\n  if (includes(path, '__proto__')) {\n    throw new Error('__proto__ is not allowed as a property');\n  }\n  if (includes(path, 'prototype')) {\n    throw new Error('prototype is not allowed as a property');\n  }\n  if (includes(path, 'constructor')) {\n    throw new Error('constructor is not allowed as a property');\n  }\n}\n\nexport const getDeep = (object: object, path: (string | number)[]): object => {\n  validatePath(path);\n\n  path.forEach(key => {\n    object = (object as any)[key];\n  });\n\n  return object;\n};\n\nexport const setDeep = (\n  object: any,\n  path: (string | number)[],\n  mapper: (v: any) => any\n): any => {\n  validatePath(path);\n\n  if (path.length === 0) {\n    return mapper(object);\n  }\n\n  let parent = object;\n\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i];\n\n    if (isArray(parent)) {\n      const index = +key;\n      parent = parent[index];\n    } else if (isPlainObject(parent)) {\n      parent = parent[key];\n    } else if (isSet(parent)) {\n      const row = +key;\n      parent = getNthKey(parent, row);\n    } else if (isMap(parent)) {\n      const isEnd = i === path.length - 2;\n      if (isEnd) {\n        break;\n      }\n\n      const row = +key;\n      const type = +path[++i] === 0 ? 'key' : 'value';\n\n      const keyOfRow = getNthKey(parent, row);\n      switch (type) {\n        case 'key':\n          parent = keyOfRow;\n          break;\n        case 'value':\n          parent = parent.get(keyOfRow);\n          break;\n      }\n    }\n  }\n\n  const lastKey = path[path.length - 1];\n\n  if (isArray(parent) || isPlainObject(parent)) {\n    parent[lastKey] = mapper(parent[lastKey]);\n  }\n\n  if (isSet(parent)) {\n    const oldValue = getNthKey(parent, +lastKey);\n    const newValue = mapper(oldValue);\n    if (oldValue !== newValue) {\n      parent.delete(oldValue);\n      parent.add(newValue);\n    }\n  }\n\n  if (isMap(parent)) {\n    const row = +path[path.length - 2];\n    const keyToRow = getNthKey(parent, row);\n\n    const type = +lastKey === 0 ? 'key' : 'value';\n    switch (type) {\n      case 'key': {\n        const newKey = mapper(keyToRow);\n        parent.set(newKey, parent.get(keyToRow));\n\n        if (newKey !== keyToRow) {\n          parent.delete(keyToRow);\n        }\n        break;\n      }\n\n      case 'value': {\n        parent.set(keyToRow, mapper(parent.get(keyToRow)));\n        break;\n      }\n    }\n  }\n\n  return object;\n};\n"]},"metadata":{},"sourceType":"module"}