{"ast":null,"code":"import { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs';\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options\n    };\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.meta = config.meta;\n    this.updateCacheTime(this.options.cacheTime);\n    this.scheduleGc();\n  }\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n  continue() {\n    if (this.retryer) {\n      this.retryer.continue();\n      return this.retryer.promise;\n    }\n    return this.execute();\n  }\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: () => {\n          this.dispatch({\n            type: 'failed'\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n    const restored = this.state.status === 'loading';\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$options$onSettl, _this$options3;\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n      const data = await executeMutation(); // Notify cache callback\n\n      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onError, _this$options4, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, error, this.state.variables, this.state.context, this));\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: state.failureCount + 1\n          };\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true\n          };\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false\n          };\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error'\n          };\n        case 'setState':\n          return {\n            ...state,\n            ...action.state\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\nexport { Mutation, getDefaultState };","map":{"version":3,"mappings":"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","names":["Mutation","Removable","constructor","config","options","defaultOptions","mutationId","mutationCache","logger","defaultLogger","observers","state","getDefaultState","meta","updateCacheTime","cacheTime","scheduleGc","setState","dispatch","type","addObserver","observer","indexOf","push","clearGcTimeout","notify","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","retryer","promise","execute","executeMutation","createRetryer","fn","mutationFn","Promise","reject","variables","onFail","onPause","onContinue","retry","retryDelay","networkMode","restored","onMutate","_this$mutationCache$c","context","data","onSuccess","_this$mutationCache$c3","_this$options$onSucce","onSettled","error","onError","_this$mutationCache$c5","process","env","NODE_ENV","_this$options$onError","undefined","action","reducer","failureCount","isPaused","canFetch","notifyManager","batch","forEach","onMutationUpdate"],"sources":["/Users/mai.nguyen/Desktop/Bouvet/FOREDRAG/BouvetSmallOne-main/node_modules/@tanstack/query-core/src/mutation.ts"],"sourcesContent":["import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport type { Retryer } from './retryer'\nimport { canFetch, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n  meta: MutationMeta | undefined\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n    this.meta = config.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: () => {\n          this.dispatch({ type: 'failed' })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        await this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: state.failureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}