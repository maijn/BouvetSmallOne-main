{"ast":null,"code":"/**\n * match-sorter-utils\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n!function (e, n) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? n(exports) : \"function\" == typeof define && define.amd ? define([\"exports\"], n) : n((e = \"undefined\" != typeof globalThis ? globalThis : e || self).MatchSorterUtils = {});\n}(this, function (e) {\n  \"use strict\";\n\n  const n = {\n      \"À\": \"A\",\n      \"Á\": \"A\",\n      \"Â\": \"A\",\n      \"Ã\": \"A\",\n      \"Ä\": \"A\",\n      \"Å\": \"A\",\n      \"Ấ\": \"A\",\n      \"Ắ\": \"A\",\n      \"Ẳ\": \"A\",\n      \"Ẵ\": \"A\",\n      \"Ặ\": \"A\",\n      \"Æ\": \"AE\",\n      \"Ầ\": \"A\",\n      \"Ằ\": \"A\",\n      \"Ȃ\": \"A\",\n      \"Ç\": \"C\",\n      \"Ḉ\": \"C\",\n      \"È\": \"E\",\n      \"É\": \"E\",\n      \"Ê\": \"E\",\n      \"Ë\": \"E\",\n      \"Ế\": \"E\",\n      \"Ḗ\": \"E\",\n      \"Ề\": \"E\",\n      \"Ḕ\": \"E\",\n      \"Ḝ\": \"E\",\n      \"Ȇ\": \"E\",\n      \"Ì\": \"I\",\n      \"Í\": \"I\",\n      \"Î\": \"I\",\n      \"Ï\": \"I\",\n      \"Ḯ\": \"I\",\n      \"Ȋ\": \"I\",\n      \"Ð\": \"D\",\n      \"Ñ\": \"N\",\n      \"Ò\": \"O\",\n      \"Ó\": \"O\",\n      \"Ô\": \"O\",\n      \"Õ\": \"O\",\n      \"Ö\": \"O\",\n      \"Ø\": \"O\",\n      \"Ố\": \"O\",\n      \"Ṍ\": \"O\",\n      \"Ṓ\": \"O\",\n      \"Ȏ\": \"O\",\n      \"Ù\": \"U\",\n      \"Ú\": \"U\",\n      \"Û\": \"U\",\n      \"Ü\": \"U\",\n      \"Ý\": \"Y\",\n      \"à\": \"a\",\n      \"á\": \"a\",\n      \"â\": \"a\",\n      \"ã\": \"a\",\n      \"ä\": \"a\",\n      \"å\": \"a\",\n      \"ấ\": \"a\",\n      \"ắ\": \"a\",\n      \"ẳ\": \"a\",\n      \"ẵ\": \"a\",\n      \"ặ\": \"a\",\n      \"æ\": \"ae\",\n      \"ầ\": \"a\",\n      \"ằ\": \"a\",\n      \"ȃ\": \"a\",\n      \"ç\": \"c\",\n      \"ḉ\": \"c\",\n      \"è\": \"e\",\n      \"é\": \"e\",\n      \"ê\": \"e\",\n      \"ë\": \"e\",\n      \"ế\": \"e\",\n      \"ḗ\": \"e\",\n      \"ề\": \"e\",\n      \"ḕ\": \"e\",\n      \"ḝ\": \"e\",\n      \"ȇ\": \"e\",\n      \"ì\": \"i\",\n      \"í\": \"i\",\n      \"î\": \"i\",\n      \"ï\": \"i\",\n      \"ḯ\": \"i\",\n      \"ȋ\": \"i\",\n      \"ð\": \"d\",\n      \"ñ\": \"n\",\n      \"ò\": \"o\",\n      \"ó\": \"o\",\n      \"ô\": \"o\",\n      \"õ\": \"o\",\n      \"ö\": \"o\",\n      \"ø\": \"o\",\n      \"ố\": \"o\",\n      \"ṍ\": \"o\",\n      \"ṓ\": \"o\",\n      \"ȏ\": \"o\",\n      \"ù\": \"u\",\n      \"ú\": \"u\",\n      \"û\": \"u\",\n      \"ü\": \"u\",\n      \"ý\": \"y\",\n      \"ÿ\": \"y\",\n      \"Ā\": \"A\",\n      \"ā\": \"a\",\n      \"Ă\": \"A\",\n      \"ă\": \"a\",\n      \"Ą\": \"A\",\n      \"ą\": \"a\",\n      \"Ć\": \"C\",\n      \"ć\": \"c\",\n      \"Ĉ\": \"C\",\n      \"ĉ\": \"c\",\n      \"Ċ\": \"C\",\n      \"ċ\": \"c\",\n      \"Č\": \"C\",\n      \"č\": \"c\",\n      \"C̆\": \"C\",\n      \"c̆\": \"c\",\n      \"Ď\": \"D\",\n      \"ď\": \"d\",\n      \"Đ\": \"D\",\n      \"đ\": \"d\",\n      \"Ē\": \"E\",\n      \"ē\": \"e\",\n      \"Ĕ\": \"E\",\n      \"ĕ\": \"e\",\n      \"Ė\": \"E\",\n      \"ė\": \"e\",\n      \"Ę\": \"E\",\n      \"ę\": \"e\",\n      \"Ě\": \"E\",\n      \"ě\": \"e\",\n      \"Ĝ\": \"G\",\n      \"Ǵ\": \"G\",\n      \"ĝ\": \"g\",\n      \"ǵ\": \"g\",\n      \"Ğ\": \"G\",\n      \"ğ\": \"g\",\n      \"Ġ\": \"G\",\n      \"ġ\": \"g\",\n      \"Ģ\": \"G\",\n      \"ģ\": \"g\",\n      \"Ĥ\": \"H\",\n      \"ĥ\": \"h\",\n      \"Ħ\": \"H\",\n      \"ħ\": \"h\",\n      \"Ḫ\": \"H\",\n      \"ḫ\": \"h\",\n      \"Ĩ\": \"I\",\n      \"ĩ\": \"i\",\n      \"Ī\": \"I\",\n      \"ī\": \"i\",\n      \"Ĭ\": \"I\",\n      \"ĭ\": \"i\",\n      \"Į\": \"I\",\n      \"į\": \"i\",\n      \"İ\": \"I\",\n      \"ı\": \"i\",\n      \"Ĳ\": \"IJ\",\n      \"ĳ\": \"ij\",\n      \"Ĵ\": \"J\",\n      \"ĵ\": \"j\",\n      \"Ķ\": \"K\",\n      \"ķ\": \"k\",\n      \"Ḱ\": \"K\",\n      \"ḱ\": \"k\",\n      \"K̆\": \"K\",\n      \"k̆\": \"k\",\n      \"Ĺ\": \"L\",\n      \"ĺ\": \"l\",\n      \"Ļ\": \"L\",\n      \"ļ\": \"l\",\n      \"Ľ\": \"L\",\n      \"ľ\": \"l\",\n      \"Ŀ\": \"L\",\n      \"ŀ\": \"l\",\n      \"Ł\": \"l\",\n      \"ł\": \"l\",\n      \"Ḿ\": \"M\",\n      \"ḿ\": \"m\",\n      \"M̆\": \"M\",\n      \"m̆\": \"m\",\n      \"Ń\": \"N\",\n      \"ń\": \"n\",\n      \"Ņ\": \"N\",\n      \"ņ\": \"n\",\n      \"Ň\": \"N\",\n      \"ň\": \"n\",\n      \"ŉ\": \"n\",\n      \"N̆\": \"N\",\n      \"n̆\": \"n\",\n      \"Ō\": \"O\",\n      \"ō\": \"o\",\n      \"Ŏ\": \"O\",\n      \"ŏ\": \"o\",\n      \"Ő\": \"O\",\n      \"ő\": \"o\",\n      \"Œ\": \"OE\",\n      \"œ\": \"oe\",\n      \"P̆\": \"P\",\n      \"p̆\": \"p\",\n      \"Ŕ\": \"R\",\n      \"ŕ\": \"r\",\n      \"Ŗ\": \"R\",\n      \"ŗ\": \"r\",\n      \"Ř\": \"R\",\n      \"ř\": \"r\",\n      \"R̆\": \"R\",\n      \"r̆\": \"r\",\n      \"Ȓ\": \"R\",\n      \"ȓ\": \"r\",\n      \"Ś\": \"S\",\n      \"ś\": \"s\",\n      \"Ŝ\": \"S\",\n      \"ŝ\": \"s\",\n      \"Ş\": \"S\",\n      \"Ș\": \"S\",\n      \"ș\": \"s\",\n      \"ş\": \"s\",\n      \"Š\": \"S\",\n      \"š\": \"s\",\n      \"Ţ\": \"T\",\n      \"ţ\": \"t\",\n      \"ț\": \"t\",\n      \"Ț\": \"T\",\n      \"Ť\": \"T\",\n      \"ť\": \"t\",\n      \"Ŧ\": \"T\",\n      \"ŧ\": \"t\",\n      \"T̆\": \"T\",\n      \"t̆\": \"t\",\n      \"Ũ\": \"U\",\n      \"ũ\": \"u\",\n      \"Ū\": \"U\",\n      \"ū\": \"u\",\n      \"Ŭ\": \"U\",\n      \"ŭ\": \"u\",\n      \"Ů\": \"U\",\n      \"ů\": \"u\",\n      \"Ű\": \"U\",\n      \"ű\": \"u\",\n      \"Ų\": \"U\",\n      \"ų\": \"u\",\n      \"Ȗ\": \"U\",\n      \"ȗ\": \"u\",\n      \"V̆\": \"V\",\n      \"v̆\": \"v\",\n      \"Ŵ\": \"W\",\n      \"ŵ\": \"w\",\n      \"Ẃ\": \"W\",\n      \"ẃ\": \"w\",\n      \"X̆\": \"X\",\n      \"x̆\": \"x\",\n      \"Ŷ\": \"Y\",\n      \"ŷ\": \"y\",\n      \"Ÿ\": \"Y\",\n      \"Y̆\": \"Y\",\n      \"y̆\": \"y\",\n      \"Ź\": \"Z\",\n      \"ź\": \"z\",\n      \"Ż\": \"Z\",\n      \"ż\": \"z\",\n      \"Ž\": \"Z\",\n      \"ž\": \"z\",\n      \"ſ\": \"s\",\n      \"ƒ\": \"f\",\n      \"Ơ\": \"O\",\n      \"ơ\": \"o\",\n      \"Ư\": \"U\",\n      \"ư\": \"u\",\n      \"Ǎ\": \"A\",\n      \"ǎ\": \"a\",\n      \"Ǐ\": \"I\",\n      \"ǐ\": \"i\",\n      \"Ǒ\": \"O\",\n      \"ǒ\": \"o\",\n      \"Ǔ\": \"U\",\n      \"ǔ\": \"u\",\n      \"Ǖ\": \"U\",\n      \"ǖ\": \"u\",\n      \"Ǘ\": \"U\",\n      \"ǘ\": \"u\",\n      \"Ǚ\": \"U\",\n      \"ǚ\": \"u\",\n      \"Ǜ\": \"U\",\n      \"ǜ\": \"u\",\n      \"Ứ\": \"U\",\n      \"ứ\": \"u\",\n      \"Ṹ\": \"U\",\n      \"ṹ\": \"u\",\n      \"Ǻ\": \"A\",\n      \"ǻ\": \"a\",\n      \"Ǽ\": \"AE\",\n      \"ǽ\": \"ae\",\n      \"Ǿ\": \"O\",\n      \"ǿ\": \"o\",\n      \"Þ\": \"TH\",\n      \"þ\": \"th\",\n      \"Ṕ\": \"P\",\n      \"ṕ\": \"p\",\n      \"Ṥ\": \"S\",\n      \"ṥ\": \"s\",\n      \"X́\": \"X\",\n      \"x́\": \"x\",\n      \"Ѓ\": \"Г\",\n      \"ѓ\": \"г\",\n      \"Ќ\": \"К\",\n      \"ќ\": \"к\",\n      \"A̋\": \"A\",\n      \"a̋\": \"a\",\n      \"E̋\": \"E\",\n      \"e̋\": \"e\",\n      \"I̋\": \"I\",\n      \"i̋\": \"i\",\n      \"Ǹ\": \"N\",\n      \"ǹ\": \"n\",\n      \"Ồ\": \"O\",\n      \"ồ\": \"o\",\n      \"Ṑ\": \"O\",\n      \"ṑ\": \"o\",\n      \"Ừ\": \"U\",\n      \"ừ\": \"u\",\n      \"Ẁ\": \"W\",\n      \"ẁ\": \"w\",\n      \"Ỳ\": \"Y\",\n      \"ỳ\": \"y\",\n      \"Ȁ\": \"A\",\n      \"ȁ\": \"a\",\n      \"Ȅ\": \"E\",\n      \"ȅ\": \"e\",\n      \"Ȉ\": \"I\",\n      \"ȉ\": \"i\",\n      \"Ȍ\": \"O\",\n      \"ȍ\": \"o\",\n      \"Ȑ\": \"R\",\n      \"ȑ\": \"r\",\n      \"Ȕ\": \"U\",\n      \"ȕ\": \"u\",\n      \"B̌\": \"B\",\n      \"b̌\": \"b\",\n      \"Č̣\": \"C\",\n      \"č̣\": \"c\",\n      \"Ê̌\": \"E\",\n      \"ê̌\": \"e\",\n      \"F̌\": \"F\",\n      \"f̌\": \"f\",\n      \"Ǧ\": \"G\",\n      \"ǧ\": \"g\",\n      \"Ȟ\": \"H\",\n      \"ȟ\": \"h\",\n      \"J̌\": \"J\",\n      \"ǰ\": \"j\",\n      \"Ǩ\": \"K\",\n      \"ǩ\": \"k\",\n      \"M̌\": \"M\",\n      \"m̌\": \"m\",\n      \"P̌\": \"P\",\n      \"p̌\": \"p\",\n      \"Q̌\": \"Q\",\n      \"q̌\": \"q\",\n      \"Ř̩\": \"R\",\n      \"ř̩\": \"r\",\n      \"Ṧ\": \"S\",\n      \"ṧ\": \"s\",\n      \"V̌\": \"V\",\n      \"v̌\": \"v\",\n      \"W̌\": \"W\",\n      \"w̌\": \"w\",\n      \"X̌\": \"X\",\n      \"x̌\": \"x\",\n      \"Y̌\": \"Y\",\n      \"y̌\": \"y\",\n      \"A̧\": \"A\",\n      \"a̧\": \"a\",\n      \"B̧\": \"B\",\n      \"b̧\": \"b\",\n      \"Ḑ\": \"D\",\n      \"ḑ\": \"d\",\n      \"Ȩ\": \"E\",\n      \"ȩ\": \"e\",\n      \"Ɛ̧\": \"E\",\n      \"ɛ̧\": \"e\",\n      \"Ḩ\": \"H\",\n      \"ḩ\": \"h\",\n      \"I̧\": \"I\",\n      \"i̧\": \"i\",\n      \"Ɨ̧\": \"I\",\n      \"ɨ̧\": \"i\",\n      \"M̧\": \"M\",\n      \"m̧\": \"m\",\n      \"O̧\": \"O\",\n      \"o̧\": \"o\",\n      \"Q̧\": \"Q\",\n      \"q̧\": \"q\",\n      \"U̧\": \"U\",\n      \"u̧\": \"u\",\n      \"X̧\": \"X\",\n      \"x̧\": \"x\",\n      \"Z̧\": \"Z\",\n      \"z̧\": \"z\"\n    },\n    t = Object.keys(n).join(\"|\"),\n    r = new RegExp(t, \"g\");\n  /**\n     * @name match-sorter\n     * @license MIT license.\n     * @copyright (c) 2099 Kent C. Dodds\n     * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\n     */\n  const o = {\n    CASE_SENSITIVE_EQUAL: 7,\n    EQUAL: 6,\n    STARTS_WITH: 5,\n    WORD_STARTS_WITH: 4,\n    CONTAINS: 3,\n    ACRONYM: 2,\n    MATCHES: 1,\n    NO_MATCH: 0\n  };\n  function s(e, n, t) {\n    return e = a(e, t), (n = a(n, t)).length > e.length ? o.NO_MATCH : e === n ? o.CASE_SENSITIVE_EQUAL : (e = e.toLowerCase()) === (n = n.toLowerCase()) ? o.EQUAL : e.startsWith(n) ? o.STARTS_WITH : e.includes(` ${n}`) ? o.WORD_STARTS_WITH : e.includes(n) ? o.CONTAINS : 1 === n.length ? o.NO_MATCH : function (e) {\n      let n = \"\";\n      return e.split(\" \").forEach(e => {\n        e.split(\"-\").forEach(e => {\n          n += e.substr(0, 1);\n        });\n      }), n;\n    }(e).includes(n) ? o.ACRONYM : function (e, n) {\n      let t = 0,\n        r = 0;\n      function s(e, n, r) {\n        for (let o = r, s = n.length; o < s; o++) {\n          if (n[o] === e) return t += 1, o + 1;\n        }\n        return -1;\n      }\n      function a(e) {\n        const r = 1 / e,\n          s = t / n.length;\n        return o.MATCHES + s * r;\n      }\n      const i = s(n[0], e, 0);\n      if (i < 0) return o.NO_MATCH;\n      r = i;\n      for (let t = 1, a = n.length; t < a; t++) {\n        r = s(n[t], e, r);\n        if (!(r > -1)) return o.NO_MATCH;\n      }\n      return a(r - i);\n    }(e, n);\n  }\n  function a(e, t) {\n    let {\n      keepDiacritics: o\n    } = t;\n    return e = `${e}`, o || (e = e.replace(r, e => n[e])), e;\n  }\n  function i(e, n) {\n    let t = n;\n    \"object\" == typeof n && (t = n.accessor);\n    const r = t(e);\n    return null == r ? [] : Array.isArray(r) ? r : [String(r)];\n  }\n  const u = {\n    maxRanking: 1 / 0,\n    minRanking: -1 / 0\n  };\n  function c(e) {\n    return \"function\" == typeof e ? u : {\n      ...u,\n      ...e\n    };\n  }\n  e.compareItems = function (e, n) {\n    return e.rank === n.rank ? 0 : e.rank > n.rank ? -1 : 1;\n  }, e.rankItem = function (e, n, t) {\n    if ((t = t || {}).threshold = t.threshold ?? o.MATCHES, !t.accessors) {\n      const r = s(e, n, t);\n      return {\n        rankedValue: e,\n        rank: r,\n        accessorIndex: -1,\n        accessorThreshold: t.threshold,\n        passed: r >= t.threshold\n      };\n    }\n    const r = function (e, n) {\n        const t = [];\n        for (let r = 0, o = n.length; r < o; r++) {\n          const o = n[r],\n            s = c(o),\n            a = i(e, o);\n          for (let e = 0, n = a.length; e < n; e++) t.push({\n            itemValue: a[e],\n            attributes: s\n          });\n        }\n        return t;\n      }(e, t.accessors),\n      a = {\n        rankedValue: e,\n        rank: o.NO_MATCH,\n        accessorIndex: -1,\n        accessorThreshold: t.threshold,\n        passed: !1\n      };\n    for (let e = 0; e < r.length; e++) {\n      const i = r[e];\n      let u = s(i.itemValue, n, t);\n      const {\n        minRanking: c,\n        maxRanking: l,\n        threshold: A = t.threshold\n      } = i.attributes;\n      u < c && u >= o.MATCHES ? u = c : u > l && (u = l), u = Math.min(u, l), u >= A && u > a.rank && (a.rank = u, a.passed = !0, a.accessorIndex = e, a.accessorThreshold = A, a.rankedValue = i.itemValue);\n    }\n    return a;\n  }, e.rankings = o, Object.defineProperty(e, \"__esModule\", {\n    value: !0\n  });\n});","map":{"version":3,"mappings":"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","names":["characterMap","À","Á","Â","Ã","Ä","Å","Ấ","Ắ","Ẳ","Ẵ","Ặ","Æ","Ầ","Ằ","Ȃ","Ç","Ḉ","È","É","Ê","Ë","Ế","Ḗ","Ề","Ḕ","Ḝ","Ȇ","Ì","Í","Î","Ï","Ḯ","Ȋ","Ð","Ñ","Ò","Ó","Ô","Õ","Ö","Ø","Ố","Ṍ","Ṓ","Ȏ","Ù","Ú","Û","Ü","Ý","à","á","â","ã","ä","å","ấ","ắ","ẳ","ẵ","ặ","æ","ầ","ằ","ȃ","ç","ḉ","è","é","ê","ë","ế","ḗ","ề","ḕ","ḝ","ȇ","ì","í","î","ï","ḯ","ȋ","ð","ñ","ò","ó","ô","õ","ö","ø","ố","ṍ","ṓ","ȏ","ù","ú","û","ü","ý","ÿ","Ā","ā","Ă","ă","Ą","ą","Ć","ć","Ĉ","ĉ","Ċ","ċ","Č","č","C̆","c̆","Ď","ď","Đ","đ","Ē","ē","Ĕ","ĕ","Ė","ė","Ę","ę","Ě","ě","Ĝ","Ǵ","ĝ","ǵ","Ğ","ğ","Ġ","ġ","Ģ","ģ","Ĥ","ĥ","Ħ","ħ","Ḫ","ḫ","Ĩ","ĩ","Ī","ī","Ĭ","ĭ","Į","į","İ","ı","Ĳ","ĳ","Ĵ","ĵ","Ķ","ķ","Ḱ","ḱ","K̆","k̆","Ĺ","ĺ","Ļ","ļ","Ľ","ľ","Ŀ","ŀ","Ł","ł","Ḿ","ḿ","M̆","m̆","Ń","ń","Ņ","ņ","Ň","ň","ŉ","N̆","n̆","Ō","ō","Ŏ","ŏ","Ő","ő","Œ","œ","P̆","p̆","Ŕ","ŕ","Ŗ","ŗ","Ř","ř","R̆","r̆","Ȓ","ȓ","Ś","ś","Ŝ","ŝ","Ş","Ș","ș","ş","Š","š","Ţ","ţ","ț","Ț","Ť","ť","Ŧ","ŧ","T̆","t̆","Ũ","ũ","Ū","ū","Ŭ","ŭ","Ů","ů","Ű","ű","Ų","ų","Ȗ","ȗ","V̆","v̆","Ŵ","ŵ","Ẃ","ẃ","X̆","x̆","Ŷ","ŷ","Ÿ","Y̆","y̆","Ź","ź","Ż","ż","Ž","ž","ſ","ƒ","Ơ","ơ","Ư","ư","Ǎ","ǎ","Ǐ","ǐ","Ǒ","ǒ","Ǔ","ǔ","Ǖ","ǖ","Ǘ","ǘ","Ǚ","ǚ","Ǜ","ǜ","Ứ","ứ","Ṹ","ṹ","Ǻ","ǻ","Ǽ","ǽ","Ǿ","ǿ","Þ","þ","Ṕ","ṕ","Ṥ","ṥ","X́","x́","Ѓ","ѓ","Ќ","ќ","A̋","a̋","E̋","e̋","I̋","i̋","Ǹ","ǹ","Ồ","ồ","Ṑ","ṑ","Ừ","ừ","Ẁ","ẁ","Ỳ","ỳ","Ȁ","ȁ","Ȅ","ȅ","Ȉ","ȉ","Ȍ","ȍ","Ȑ","ȑ","Ȕ","ȕ","B̌","b̌","Č̣","č̣","Ê̌","ê̌","F̌","f̌","Ǧ","ǧ","Ȟ","ȟ","J̌","ǰ","Ǩ","ǩ","M̌","m̌","P̌","p̌","Q̌","q̌","Ř̩","ř̩","Ṧ","ṧ","V̌","v̌","W̌","w̌","X̌","x̌","Y̌","y̌","A̧","a̧","B̧","b̧","Ḑ","ḑ","Ȩ","ȩ","Ɛ̧","ɛ̧","Ḩ","ḩ","I̧","i̧","Ɨ̧","ɨ̧","M̧","m̧","O̧","o̧","Q̧","q̧","U̧","u̧","X̧","x̧","Z̧","z̧","chars","Object","keys","join","allAccents","RegExp","rankings","CASE_SENSITIVE_EQUAL","EQUAL","STARTS_WITH","WORD_STARTS_WITH","CONTAINS","ACRONYM","MATCHES","NO_MATCH","getMatchRanking","testString","stringToRank","options","prepareValueForComparison","length","toLowerCase","startsWith","includes","string","acronym","split","forEach","wordInString","splitByHyphenWord","substr","getAcronym","matchingInOrderCharCount","charNumber","findMatchingCharacter","matchChar","index","j","J","getRanking","spread","spreadPercentage","inOrderPercentage","firstIndex","i","I","getClosenessRanking","value","_ref","keepDiacritics","replace","match","getItemValues","item","accessor","accessorFn","Array","isArray","String","defaultKeyAttributes","maxRanking","Infinity","minRanking","getAccessorAttributes","e","a","b","rank","threshold","accessors","rankedValue","accessorIndex","accessorThreshold","passed","valuesToRank","allValues","attributes","itemValues","push","itemValue","getAllValuesToRank","rankingInfo","rankValue","newRank","Math","min"],"sources":["/Users/mai.nguyen/Desktop/Bouvet/FOREDRAG/BouvetSmallOne-main/node_modules/@tanstack/match-sorter-utils/src/remove-accents.ts","/Users/mai.nguyen/Desktop/Bouvet/FOREDRAG/BouvetSmallOne-main/node_modules/@tanstack/match-sorter-utils/src/index.ts"],"sourcesContent":["const characterMap: Record<string, string> = {\n  À: 'A',\n  Á: 'A',\n  Â: 'A',\n  Ã: 'A',\n  Ä: 'A',\n  Å: 'A',\n  Ấ: 'A',\n  Ắ: 'A',\n  Ẳ: 'A',\n  Ẵ: 'A',\n  Ặ: 'A',\n  Æ: 'AE',\n  Ầ: 'A',\n  Ằ: 'A',\n  Ȃ: 'A',\n  Ç: 'C',\n  Ḉ: 'C',\n  È: 'E',\n  É: 'E',\n  Ê: 'E',\n  Ë: 'E',\n  Ế: 'E',\n  Ḗ: 'E',\n  Ề: 'E',\n  Ḕ: 'E',\n  Ḝ: 'E',\n  Ȇ: 'E',\n  Ì: 'I',\n  Í: 'I',\n  Î: 'I',\n  Ï: 'I',\n  Ḯ: 'I',\n  Ȋ: 'I',\n  Ð: 'D',\n  Ñ: 'N',\n  Ò: 'O',\n  Ó: 'O',\n  Ô: 'O',\n  Õ: 'O',\n  Ö: 'O',\n  Ø: 'O',\n  Ố: 'O',\n  Ṍ: 'O',\n  Ṓ: 'O',\n  Ȏ: 'O',\n  Ù: 'U',\n  Ú: 'U',\n  Û: 'U',\n  Ü: 'U',\n  Ý: 'Y',\n  à: 'a',\n  á: 'a',\n  â: 'a',\n  ã: 'a',\n  ä: 'a',\n  å: 'a',\n  ấ: 'a',\n  ắ: 'a',\n  ẳ: 'a',\n  ẵ: 'a',\n  ặ: 'a',\n  æ: 'ae',\n  ầ: 'a',\n  ằ: 'a',\n  ȃ: 'a',\n  ç: 'c',\n  ḉ: 'c',\n  è: 'e',\n  é: 'e',\n  ê: 'e',\n  ë: 'e',\n  ế: 'e',\n  ḗ: 'e',\n  ề: 'e',\n  ḕ: 'e',\n  ḝ: 'e',\n  ȇ: 'e',\n  ì: 'i',\n  í: 'i',\n  î: 'i',\n  ï: 'i',\n  ḯ: 'i',\n  ȋ: 'i',\n  ð: 'd',\n  ñ: 'n',\n  ò: 'o',\n  ó: 'o',\n  ô: 'o',\n  õ: 'o',\n  ö: 'o',\n  ø: 'o',\n  ố: 'o',\n  ṍ: 'o',\n  ṓ: 'o',\n  ȏ: 'o',\n  ù: 'u',\n  ú: 'u',\n  û: 'u',\n  ü: 'u',\n  ý: 'y',\n  ÿ: 'y',\n  Ā: 'A',\n  ā: 'a',\n  Ă: 'A',\n  ă: 'a',\n  Ą: 'A',\n  ą: 'a',\n  Ć: 'C',\n  ć: 'c',\n  Ĉ: 'C',\n  ĉ: 'c',\n  Ċ: 'C',\n  ċ: 'c',\n  Č: 'C',\n  č: 'c',\n  C̆: 'C',\n  c̆: 'c',\n  Ď: 'D',\n  ď: 'd',\n  Đ: 'D',\n  đ: 'd',\n  Ē: 'E',\n  ē: 'e',\n  Ĕ: 'E',\n  ĕ: 'e',\n  Ė: 'E',\n  ė: 'e',\n  Ę: 'E',\n  ę: 'e',\n  Ě: 'E',\n  ě: 'e',\n  Ĝ: 'G',\n  Ǵ: 'G',\n  ĝ: 'g',\n  ǵ: 'g',\n  Ğ: 'G',\n  ğ: 'g',\n  Ġ: 'G',\n  ġ: 'g',\n  Ģ: 'G',\n  ģ: 'g',\n  Ĥ: 'H',\n  ĥ: 'h',\n  Ħ: 'H',\n  ħ: 'h',\n  Ḫ: 'H',\n  ḫ: 'h',\n  Ĩ: 'I',\n  ĩ: 'i',\n  Ī: 'I',\n  ī: 'i',\n  Ĭ: 'I',\n  ĭ: 'i',\n  Į: 'I',\n  į: 'i',\n  İ: 'I',\n  ı: 'i',\n  Ĳ: 'IJ',\n  ĳ: 'ij',\n  Ĵ: 'J',\n  ĵ: 'j',\n  Ķ: 'K',\n  ķ: 'k',\n  Ḱ: 'K',\n  ḱ: 'k',\n  K̆: 'K',\n  k̆: 'k',\n  Ĺ: 'L',\n  ĺ: 'l',\n  Ļ: 'L',\n  ļ: 'l',\n  Ľ: 'L',\n  ľ: 'l',\n  Ŀ: 'L',\n  ŀ: 'l',\n  Ł: 'l',\n  ł: 'l',\n  Ḿ: 'M',\n  ḿ: 'm',\n  M̆: 'M',\n  m̆: 'm',\n  Ń: 'N',\n  ń: 'n',\n  Ņ: 'N',\n  ņ: 'n',\n  Ň: 'N',\n  ň: 'n',\n  ŉ: 'n',\n  N̆: 'N',\n  n̆: 'n',\n  Ō: 'O',\n  ō: 'o',\n  Ŏ: 'O',\n  ŏ: 'o',\n  Ő: 'O',\n  ő: 'o',\n  Œ: 'OE',\n  œ: 'oe',\n  P̆: 'P',\n  p̆: 'p',\n  Ŕ: 'R',\n  ŕ: 'r',\n  Ŗ: 'R',\n  ŗ: 'r',\n  Ř: 'R',\n  ř: 'r',\n  R̆: 'R',\n  r̆: 'r',\n  Ȓ: 'R',\n  ȓ: 'r',\n  Ś: 'S',\n  ś: 's',\n  Ŝ: 'S',\n  ŝ: 's',\n  Ş: 'S',\n  Ș: 'S',\n  ș: 's',\n  ş: 's',\n  Š: 'S',\n  š: 's',\n  Ţ: 'T',\n  ţ: 't',\n  ț: 't',\n  Ț: 'T',\n  Ť: 'T',\n  ť: 't',\n  Ŧ: 'T',\n  ŧ: 't',\n  T̆: 'T',\n  t̆: 't',\n  Ũ: 'U',\n  ũ: 'u',\n  Ū: 'U',\n  ū: 'u',\n  Ŭ: 'U',\n  ŭ: 'u',\n  Ů: 'U',\n  ů: 'u',\n  Ű: 'U',\n  ű: 'u',\n  Ų: 'U',\n  ų: 'u',\n  Ȗ: 'U',\n  ȗ: 'u',\n  V̆: 'V',\n  v̆: 'v',\n  Ŵ: 'W',\n  ŵ: 'w',\n  Ẃ: 'W',\n  ẃ: 'w',\n  X̆: 'X',\n  x̆: 'x',\n  Ŷ: 'Y',\n  ŷ: 'y',\n  Ÿ: 'Y',\n  Y̆: 'Y',\n  y̆: 'y',\n  Ź: 'Z',\n  ź: 'z',\n  Ż: 'Z',\n  ż: 'z',\n  Ž: 'Z',\n  ž: 'z',\n  ſ: 's',\n  ƒ: 'f',\n  Ơ: 'O',\n  ơ: 'o',\n  Ư: 'U',\n  ư: 'u',\n  Ǎ: 'A',\n  ǎ: 'a',\n  Ǐ: 'I',\n  ǐ: 'i',\n  Ǒ: 'O',\n  ǒ: 'o',\n  Ǔ: 'U',\n  ǔ: 'u',\n  Ǖ: 'U',\n  ǖ: 'u',\n  Ǘ: 'U',\n  ǘ: 'u',\n  Ǚ: 'U',\n  ǚ: 'u',\n  Ǜ: 'U',\n  ǜ: 'u',\n  Ứ: 'U',\n  ứ: 'u',\n  Ṹ: 'U',\n  ṹ: 'u',\n  Ǻ: 'A',\n  ǻ: 'a',\n  Ǽ: 'AE',\n  ǽ: 'ae',\n  Ǿ: 'O',\n  ǿ: 'o',\n  Þ: 'TH',\n  þ: 'th',\n  Ṕ: 'P',\n  ṕ: 'p',\n  Ṥ: 'S',\n  ṥ: 's',\n  X́: 'X',\n  x́: 'x',\n  Ѓ: 'Г',\n  ѓ: 'г',\n  Ќ: 'К',\n  ќ: 'к',\n  A̋: 'A',\n  a̋: 'a',\n  E̋: 'E',\n  e̋: 'e',\n  I̋: 'I',\n  i̋: 'i',\n  Ǹ: 'N',\n  ǹ: 'n',\n  Ồ: 'O',\n  ồ: 'o',\n  Ṑ: 'O',\n  ṑ: 'o',\n  Ừ: 'U',\n  ừ: 'u',\n  Ẁ: 'W',\n  ẁ: 'w',\n  Ỳ: 'Y',\n  ỳ: 'y',\n  Ȁ: 'A',\n  ȁ: 'a',\n  Ȅ: 'E',\n  ȅ: 'e',\n  Ȉ: 'I',\n  ȉ: 'i',\n  Ȍ: 'O',\n  ȍ: 'o',\n  Ȑ: 'R',\n  ȑ: 'r',\n  Ȕ: 'U',\n  ȕ: 'u',\n  B̌: 'B',\n  b̌: 'b',\n  Č̣: 'C',\n  č̣: 'c',\n  Ê̌: 'E',\n  ê̌: 'e',\n  F̌: 'F',\n  f̌: 'f',\n  Ǧ: 'G',\n  ǧ: 'g',\n  Ȟ: 'H',\n  ȟ: 'h',\n  J̌: 'J',\n  ǰ: 'j',\n  Ǩ: 'K',\n  ǩ: 'k',\n  M̌: 'M',\n  m̌: 'm',\n  P̌: 'P',\n  p̌: 'p',\n  Q̌: 'Q',\n  q̌: 'q',\n  Ř̩: 'R',\n  ř̩: 'r',\n  Ṧ: 'S',\n  ṧ: 's',\n  V̌: 'V',\n  v̌: 'v',\n  W̌: 'W',\n  w̌: 'w',\n  X̌: 'X',\n  x̌: 'x',\n  Y̌: 'Y',\n  y̌: 'y',\n  A̧: 'A',\n  a̧: 'a',\n  B̧: 'B',\n  b̧: 'b',\n  Ḑ: 'D',\n  ḑ: 'd',\n  Ȩ: 'E',\n  ȩ: 'e',\n  Ɛ̧: 'E',\n  ɛ̧: 'e',\n  Ḩ: 'H',\n  ḩ: 'h',\n  I̧: 'I',\n  i̧: 'i',\n  Ɨ̧: 'I',\n  ɨ̧: 'i',\n  M̧: 'M',\n  m̧: 'm',\n  O̧: 'O',\n  o̧: 'o',\n  Q̧: 'Q',\n  q̧: 'q',\n  U̧: 'U',\n  u̧: 'u',\n  X̧: 'X',\n  x̧: 'x',\n  Z̧: 'Z',\n  z̧: 'z',\n}\n\nconst chars = Object.keys(characterMap).join('|')\nconst allAccents = new RegExp(chars, 'g')\n\nexport function removeAccents(str: string) {\n  return str.replace(allAccents, match => {\n    return characterMap[match]!\n  })\n}\n","/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2099 Kent C. Dodds\n * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\n */\n\n// This is a fork of match-sorter. Instead of offering\n// a unified API for filtering and sorting in a single pass,\n// match-sorter-utils provides the lower-level utilities of\n// ranking items and comparing ranks in a way that can\n// be incrementally applied to a system rather than\n// all-at-once.\n\n// 1. Use the rankItem function to rank an item\n// 2. Use the resulting rankingInfo.passed to filter\n// 3. Use the resulting rankingInfo.rank to sort\n\n// For bundling purposes (mainly remove-accents not being esm safe/ready),\n// we've also hard-coded remove-accents into this source.\n// The remove-accents package is still included as a dependency\n// for attribution purposes, but it will not be imported and bundled.\n\nimport { removeAccents } from './remove-accents'\n\nexport type AccessorAttributes = {\n  threshold?: Ranking\n  maxRanking: Ranking\n  minRanking: Ranking\n}\n\nexport interface RankingInfo {\n  rankedValue: any\n  rank: Ranking\n  accessorIndex: number\n  accessorThreshold: Ranking | undefined\n  passed: boolean\n}\n\nexport interface AccessorOptions<TItem> {\n  accessor: AccessorFn<TItem>\n  threshold?: Ranking\n  maxRanking?: Ranking\n  minRanking?: Ranking\n}\n\nexport type AccessorFn<TItem> = (item: TItem) => string | Array<string>\n\nexport type Accessor<TItem> = AccessorFn<TItem> | AccessorOptions<TItem>\n\nexport interface RankItemOptions<TItem = unknown> {\n  accessors?: ReadonlyArray<Accessor<TItem>>\n  threshold?: Ranking\n  keepDiacritics?: boolean\n}\n\nexport const rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0,\n} as const\n\nexport type Ranking = typeof rankings[keyof typeof rankings]\n\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, accessorIndex: Number, accessorThreshold: Number}} - the highest ranking\n */\nexport function rankItem<TItem>(\n  item: TItem,\n  value: string,\n  options?: RankItemOptions<TItem>\n): RankingInfo {\n  options = options || {}\n\n  options.threshold = options.threshold ?? rankings.MATCHES\n\n  if (!options.accessors) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    const rank = getMatchRanking(item as unknown as string, value, options)\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: item,\n      rank,\n      accessorIndex: -1,\n      accessorThreshold: options.threshold,\n      passed: rank >= options.threshold,\n    }\n  }\n\n  const valuesToRank = getAllValuesToRank(item, options.accessors)\n\n  const rankingInfo: RankingInfo = {\n    rankedValue: item,\n    rank: rankings.NO_MATCH as Ranking,\n    accessorIndex: -1,\n    accessorThreshold: options.threshold,\n    passed: false,\n  }\n\n  for (let i = 0; i < valuesToRank.length; i++) {\n    const rankValue = valuesToRank[i]!\n\n    let newRank = getMatchRanking(rankValue.itemValue, value, options)\n\n    const { minRanking, maxRanking, threshold = options.threshold } = rankValue.attributes\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking\n    }\n\n    newRank = Math.min(newRank, maxRanking) as Ranking\n\n    if (newRank >= threshold && newRank > rankingInfo.rank) {\n      rankingInfo.rank = newRank\n      rankingInfo.passed = true\n      rankingInfo.accessorIndex = i\n      rankingInfo.accessorThreshold = threshold\n      rankingInfo.rankedValue = rankValue.itemValue\n    }\n  }\n\n  return rankingInfo\n}\n\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\nfunction getMatchRanking<TItem>(\n  testString: string,\n  stringToRank: string,\n  options: RankItemOptions<TItem>\n): Ranking {\n  testString = prepareValueForComparison(testString, options)\n  stringToRank = prepareValueForComparison(stringToRank, options)\n\n  // too long\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH\n  }\n\n  // case sensitive equals\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL\n  }\n\n  // Lower casing before further comparison\n  testString = testString.toLowerCase()\n  stringToRank = stringToRank.toLowerCase()\n\n  // case insensitive equals\n  if (testString === stringToRank) {\n    return rankings.EQUAL\n  }\n\n  // starts with\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH\n  }\n\n  // word starts with\n  if (testString.includes(` ${stringToRank}`)) {\n    return rankings.WORD_STARTS_WITH\n  }\n\n  // contains\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH\n  }\n\n  // acronym\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM\n  }\n\n  // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n  return getClosenessRanking(testString, stringToRank)\n}\n\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\nfunction getAcronym(string: string): string {\n  let acronym = ''\n  const wordsInString = string.split(' ')\n  wordsInString.forEach(wordInString => {\n    const splitByHyphenWords = wordInString.split('-')\n    splitByHyphenWords.forEach(splitByHyphenWord => {\n      acronym += splitByHyphenWord.substr(0, 1)\n    })\n  })\n  return acronym\n}\n\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\nfunction getClosenessRanking(\n  testString: string,\n  stringToRank: string\n): Ranking {\n  let matchingInOrderCharCount = 0\n  let charNumber = 0\n  function findMatchingCharacter(\n    matchChar: undefined | string,\n    string: string,\n    index: number\n  ) {\n    for (let j = index, J = string.length; j < J; j++) {\n      const stringChar = string[j]\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1\n        return j + 1\n      }\n    }\n    return -1\n  }\n  function getRanking(spread: number) {\n    const spreadPercentage = 1 / spread\n    const inOrderPercentage = matchingInOrderCharCount / stringToRank.length\n    const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage\n    return ranking as Ranking\n  }\n  const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0)\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH\n  }\n  charNumber = firstIndex\n  for (let i = 1, I = stringToRank.length; i < I; i++) {\n    const matchChar = stringToRank[i]\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber)\n    const found = charNumber > -1\n    if (!found) {\n      return rankings.NO_MATCH\n    }\n  }\n\n  const spread = charNumber - firstIndex\n  return getRanking(spread)\n}\n\n/**\n * Sorts items that have a rank, index, and accessorIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\nexport function compareItems<TItem>(a: RankingInfo, b: RankingInfo): number {\n  return a.rank === b.rank ? 0 : a.rank > b.rank ? -1 : 1\n}\n\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\nfunction prepareValueForComparison<TItem>(\n  value: string,\n  { keepDiacritics }: RankItemOptions<TItem>\n): string {\n  // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = `${value}` // toString\n  if (!keepDiacritics) {\n    value = removeAccents(value)\n  }\n  return value\n}\n\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\nfunction getItemValues<TItem>(\n  item: TItem,\n  accessor: Accessor<TItem>\n): Array<string> {\n  let accessorFn = accessor as AccessorFn<TItem>\n\n  if (typeof accessor === 'object') {\n    accessorFn = accessor.accessor\n  }\n\n  const value = accessorFn(item)\n\n  // because `value` can also be undefined\n  if (value == null) {\n    return []\n  }\n\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  return [String(value)]\n}\n\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\nfunction getAllValuesToRank<TItem>(\n  item: TItem,\n  accessors: ReadonlyArray<Accessor<TItem>>\n) {\n  const allValues: Array<{\n    itemValue: string\n    attributes: AccessorAttributes\n  }> = []\n  for (let j = 0, J = accessors.length; j < J; j++) {\n    const accessor = accessors[j]!\n    const attributes = getAccessorAttributes(accessor)\n    const itemValues = getItemValues(item, accessor)\n    for (let i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i]!,\n        attributes,\n      })\n    }\n  }\n  return allValues\n}\n\nconst defaultKeyAttributes = {\n  maxRanking: Infinity as Ranking,\n  minRanking: -Infinity as Ranking,\n}\n/**\n * Gets all the attributes for the given accessor\n * @param accessor - the accessor from which the attributes will be retrieved\n * @return object containing the accessor's attributes\n */\nfunction getAccessorAttributes<TItem>(\n  accessor: Accessor<TItem>\n): AccessorAttributes {\n  if (typeof accessor === 'function') {\n    return defaultKeyAttributes\n  }\n  return { ...defaultKeyAttributes, ...accessor }\n}\n"]},"metadata":{},"sourceType":"script"}